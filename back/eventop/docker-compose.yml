services:
  # Servicio para el contenedor de la API
  eventop:
    container_name: eventop  # Nombre del contenedor
    image: eventop  # Imagen del contenedor
    ports:
      - "3000:3000"  # Exponer el puerto 3000 del contenedor
    env_file:
      - .env
    environment:
    - DB_HOST=postgresdb
    - DB_PORT=5432
    - DB_USERNAME=postgres
    - DB_PASSWORD=postgres
    - DB_NAME=eventop  # Utilizamos variables individuales
    depends_on:
      - postgresdb  # El contenedor de la API depende del contenedor de la DB
    restart: always  # Reinicia el contenedor si falla
    networks:
      - eventop_network  # Aseguramos que los contenedores estén en la misma red

  # Servicio para el contenedor de PostgreSQL
  postgresdb:
    container_name: postgresdb  # Nombre del contenedor de la base de datos
    image: postgres  # Imagen de PostgreSQL
    volumes:
      - ./postgres-data:/var/lib/postgresql/data  # Monta los datos de la base de datos
      - ./postgres-data/postgresql.conf:/etc/postgresql/postgresql.conf  # Monta el archivo de configuración correctamente
    env_file:
      - .env  # Variables de entorno
    ports:
      - "5432:5432"  # Exponer el puerto 5432 para la conexión a la DB
    restart: always  # Reinicia el contenedor si falla
    networks:
      - eventop_network  # Aseguramos que los contenedores estén en la misma red

  # Servicio para el contenedor de PgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      # POSTGRES_HOST_AUTH_METHOD: trust  # Permitir conexiones sin contraseña (solo para desarrollo)
    ports:
      - '8080:80'
    networks: 
      - eventop_network
    depends_on:
      - postgresdb  # Cambiado a postgresdb para coincidir con el nombre del servicio

volumes:
  postgres-data:

networks:
  eventop_network:  # Red personalizada para la comunicación entre contenedores
    driver: bridge